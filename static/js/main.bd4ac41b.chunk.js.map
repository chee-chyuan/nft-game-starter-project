{"version":3,"sources":["assets/twitter-logo.svg","constants.js","Components/LoadingIndicator/index.js","Components/SelectCharacter/index.js","Components/Arena/index.js","App.js","index.js"],"names":["CONTRACT_ADDRESS","transformCharacterData","characterData","name","imageURI","hp","toNumber","maxHp","attackDamage","LoadingIndicator","className","SelectCharacter","setCharacterNFT","useState","characters","setCharacters","gameContract","setGameContract","mintingCharacter","setMintingCharacter","useEffect","ethereum","window","signer","ethers","providers","Web3Provider","getSigner","Contract","myEpicGame","abi","console","log","getCharacters","a","getAllDefaultCharacters","charactersTxn","map","error","onCharacterMint","sender","tokenId","characterIndex","getAddress","addr","checkIfUserHasNFT","characterNFT","on","off","length","character","index","src","alt","type","onClick","characterId","mintCharacterNFT","mintTxn","wait","warn","Arena","boss","setBoss","attackState","setAttackState","showToast","setShowToast","runAttackAction","attackBoss","attackTxn","setTimeout","fetchBoss","getBigBoss","bossTxn","onAttackComplete","newBossHp","newPlayerHp","bossHp","playerHp","prevState","id","value","max","TWITTER_HANDLE","TWITTER_LINK","App","currentAccount","setCurrentAccount","isLoading","setIsLoading","checkIfWalletIsConnected","request","method","accounts","account","connectWalletAction","alert","fetchNFTMetadata","provider","txn","twitterLogo","href","target","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bd4ac41b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.a8a75254.svg\";","const CONTRACT_ADDRESS = '0x07AB785F950e42A62A0F24ceaF157dD83EfE287e';\n\nconst transformCharacterData = (characterData) => {\n  return {\n    name: characterData.name,\n    imageURI: characterData.imageURI,\n    hp: characterData.hp.toNumber(),\n    maxHp: characterData.maxHp.toNumber(),\n    attackDamage: characterData.attackDamage.toNumber(),\n  };\n};\n\nconst abi = [{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"characterNames\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"characterImageURIs\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"characterHp\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"characterAttackDmg\",\"type\":\"uint256[]\"},{\"internalType\":\"string\",\"name\":\"bossName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"bossImageURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"bossHp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bossAttackDamage\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBossHp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPlayerHp\",\"type\":\"uint256\"}],\"name\":\"AttackComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"characterIndex\",\"type\":\"uint256\"}],\"name\":\"CharacterNFTMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"attackBoss\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bigBoss\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"hp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxHp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"attackDamage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkIfUserHasNFT\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"characterIndex\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"hp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxHp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"attackDamage\",\"type\":\"uint256\"}],\"internalType\":\"struct MyEpicGame.CharacterAttributes\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllDefaultCharacters\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"characterIndex\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"hp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxHp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"attackDamage\",\"type\":\"uint256\"}],\"internalType\":\"struct MyEpicGame.CharacterAttributes[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBigBoss\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"hp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxHp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"attackDamage\",\"type\":\"uint256\"}],\"internalType\":\"struct MyEpicGame.BigBoss\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_characterIndex\",\"type\":\"uint256\"}],\"name\":\"mintCharacterNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftHolderAttributes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"characterIndex\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"hp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxHp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"attackDamage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nftHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}];\n\nexport { CONTRACT_ADDRESS, transformCharacterData, abi };","import React from 'react';\nimport './LoadingIndicator.css';\n\nconst LoadingIndicator = () => {\n  return (\n    <div className=\"lds-ring\">\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n    </div>\n  );\n};\n\nexport default LoadingIndicator;\n","import React, { useEffect, useState } from \"react\";\nimport \"./SelectCharacter.css\";\nimport { ethers } from \"ethers\";\nimport { CONTRACT_ADDRESS, transformCharacterData } from \"../../constants\";\nimport myEpicGame from \"../../utils/MyEpicGame.json\";\nimport LoadingIndicator from \"../LoadingIndicator\"\n\n/*\n * Don't worry about setCharacterNFT just yet, we will talk about it soon!\n */\nconst SelectCharacter = ({ setCharacterNFT }) => {\n  const [characters, setCharacters] = useState([]);\n  const [gameContract, setGameContract] = useState(null);\n  const [mintingCharacter, setMintingCharacter] = useState(false);\n  // UseEffect\n  useEffect(() => {\n    const { ethereum } = window;\n\n    if (ethereum) {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(\n        CONTRACT_ADDRESS,\n        myEpicGame.abi,\n        signer\n      );\n\n      /*\n       * This is the big difference. Set our gameContract in state.\n       */\n      setGameContract(gameContract);\n    } else {\n      console.log(\"Ethereum object not found\");\n    }\n  }, []);\n\n  useEffect(() => {\n    const getCharacters = async () => {\n      try {\n        console.log(\"Getting contract characters to mint\");\n\n        const charactersTxn = await gameContract.getAllDefaultCharacters();\n        console.log(\"charactersTxn:\", charactersTxn);\n\n        const characters = charactersTxn.map((characterData) =>\n          transformCharacterData(characterData)\n        );\n\n        setCharacters(characters);\n      } catch (error) {\n        console.error(\"Something went wrong fetching characters:\", error);\n      }\n    };\n\n    /*\n     * Add a callback method that will fire when this event is received\n     */\n    const onCharacterMint = async (sender, tokenId, characterIndex) => {\n      console.log(\n        `CharacterNFTMinted - sender: ${sender} tokenId: ${tokenId.toNumber()} characterIndex: ${characterIndex.toNumber()}`\n      );\n\n      /*\n       * Once our character NFT is minted we can fetch the metadata from our contract\n       * and set it in state to move onto the Arena\n       */\n      if (gameContract) {\n        debugger;\n        let addr = await gameContract.signer.getAddress();\n        const characterNFT = await gameContract.checkIfUserHasNFT(addr);\n        console.log(\"CharacterNFT: \", characterNFT);\n        setCharacterNFT(transformCharacterData(characterNFT));\n      }\n    };\n\n    if (gameContract) {\n      getCharacters();\n\n      /*\n       * Setup NFT Minted Listener\n       */\n      gameContract.on(\"CharacterNFTMinted\", onCharacterMint);\n    }\n\n    return () => {\n      /*\n       * When your component unmounts, let;s make sure to clean up this listener\n       */\n      if (gameContract) {\n        gameContract.off(\"CharacterNFTMinted\", onCharacterMint);\n      }\n    };\n  }, [gameContract]);\n\n  // Actions\n  const mintCharacterNFTAction = (characterId) => async () => {\n    try {\n      if (gameContract) {\n        setMintingCharacter(true);\n        console.log(\"Minting character in progress...\");\n        const mintTxn = await gameContract.mintCharacterNFT(characterId);\n        await mintTxn.wait();\n        console.log(\"mintTxn:\", mintTxn);\n        setMintingCharacter(false);\n      }\n    } catch (error) {\n      console.warn(\"MintCharacterAction Error:\", error);\n      setMintingCharacter(false);\n    }\n  };\n\n  const renderCharacters = () =>\n    characters.map((character, index) => (\n      <div className=\"character-item\" key={character.name}>\n        <div className=\"name-container\">\n          <p>{character.name}</p>\n        </div>\n        <img src={character.imageURI} alt={character.name} />\n        <button\n          type=\"button\"\n          className=\"character-mint-button\"\n          onClick={mintCharacterNFTAction(index)}\n        >{`Mint ${character.name}`}</button>\n      </div>\n    ));\n\n  return (\n    <div className=\"select-character-container\">\n      <h2>Mint Your Hero. Choose wisely.</h2>\n      {/* Only show this when there are characters in state */}\n      {characters.length > 0 && (\n        <div className=\"character-grid\">{renderCharacters()}</div>\n      )}\n      {mintingCharacter && (\n        <div className=\"loading\">\n          <div className=\"indicator\">\n            <LoadingIndicator />\n            <p>Minting In Progress...</p>\n          </div>\n          <img\n            src=\"https://media2.giphy.com/media/61tYloUgq1eOk/giphy.gif?cid=ecf05e47dg95zbpabxhmhaksvoy8h526f96k4em0ndvx078s&rid=giphy.gif&ct=g\"\n            alt=\"Minting loading indicator\"\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SelectCharacter;\n","import React, { useEffect, useState } from \"react\";\r\nimport { ethers } from \"ethers\";\r\nimport { CONTRACT_ADDRESS, transformCharacterData } from \"../../constants\";\r\nimport myEpicGame from \"../../utils/MyEpicGame.json\";\r\nimport \"./Arena.css\";\r\nimport LoadingIndicator from \"../LoadingIndicator\";\r\n\r\n/*\r\n * We pass in our characterNFT metadata so we can a cool card in our UI\r\n */\r\nconst Arena = ({ characterNFT, setCharacterNFT }) => {\r\n  // State\r\n  const [gameContract, setGameContract] = useState(null);\r\n  /*\r\n   * State theat will hold our boss metadata\r\n   */\r\n  const [boss, setBoss] = useState(null);\r\n  // Actions\r\n  const [attackState, setAttackState] = useState(\"\");\r\n  const [showToast, setShowToast] = useState(false);\r\n\r\n  const runAttackAction = async () => {\r\n    try {\r\n      if (gameContract) {\r\n        setAttackState(\"attacking\");\r\n        console.log(\"Attacking boss...\");\r\n        const attackTxn = await gameContract.attackBoss();\r\n        await attackTxn.wait();\r\n        console.log(\"attackTxn:\", attackTxn);\r\n        setAttackState(\"hit\");\r\n\r\n        /*\r\n         * Set your toast state to true and then false 5 seconds later\r\n         */\r\n        setShowToast(true);\r\n        setTimeout(() => {\r\n          setShowToast(false);\r\n        }, 5000);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error attacking boss:\", error);\r\n      setAttackState(\"\");\r\n    }\r\n  };\r\n  // UseEffects\r\n  useEffect(() => {\r\n    /*\r\n     * Setup async function that will get the boss from our contract and sets in state\r\n     */\r\n    const fetchBoss = async () => {\r\n      const bossTxn = await gameContract.getBigBoss();\r\n      console.log(\"Boss:\", bossTxn);\r\n      setBoss(transformCharacterData(bossTxn));\r\n    };\r\n\r\n    if (gameContract) {\r\n      /*\r\n       * gameContract is ready to go! Let's fetch our boss\r\n       */\r\n      fetchBoss();\r\n    }\r\n  }, [gameContract]);\r\n  // UseEffects\r\n  useEffect(() => {\r\n    const { ethereum } = window;\r\n\r\n    if (ethereum) {\r\n      const provider = new ethers.providers.Web3Provider(ethereum);\r\n      const signer = provider.getSigner();\r\n      const gameContract = new ethers.Contract(\r\n        CONTRACT_ADDRESS,\r\n        myEpicGame.abi,\r\n        signer\r\n      );\r\n\r\n      setGameContract(gameContract);\r\n    } else {\r\n      console.log(\"Ethereum object not found\");\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchBoss = async () => {\r\n      const bossTxn = await gameContract.getBigBoss();\r\n      console.log(\"Boss:\", bossTxn);\r\n      setBoss(transformCharacterData(bossTxn));\r\n    };\r\n\r\n    /*\r\n     * Setup logic when this event is fired off\r\n     */\r\n    const onAttackComplete = (newBossHp, newPlayerHp) => {\r\n      const bossHp = newBossHp.toNumber();\r\n      const playerHp = newPlayerHp.toNumber();\r\n\r\n      console.log(`AttackComplete: Boss Hp: ${bossHp} Player Hp: ${playerHp}`);\r\n\r\n      /*\r\n       * Update both player and boss Hp\r\n       */\r\n      setBoss((prevState) => {\r\n        return { ...prevState, hp: bossHp };\r\n      });\r\n\r\n      setCharacterNFT((prevState) => {\r\n        return { ...prevState, hp: playerHp };\r\n      });\r\n    };\r\n\r\n    if (gameContract) {\r\n      fetchBoss();\r\n      gameContract.on(\"AttackComplete\", onAttackComplete);\r\n    }\r\n\r\n    /*\r\n     * Make sure to clean up this event when this component is removed\r\n     */\r\n    return () => {\r\n      if (gameContract) {\r\n        gameContract.off(\"AttackComplete\", onAttackComplete);\r\n      }\r\n    };\r\n  }, [gameContract]);\r\n\r\n  return (\r\n    <div className=\"arena-container\">\r\n      {showToast && (\r\n        <div id=\"toast\" className=\"show\">\r\n          <div id=\"desc\">{`💥 ${boss.name} was hit for ${characterNFT.attackDamage}!`}</div>\r\n        </div>\r\n      )}\r\n      {boss && (\r\n        <div className=\"boss-container\">\r\n          {/* Add attackState to the className! After all, it's just class names */}\r\n          <div className={`boss-content ${attackState}`}>\r\n            <h2>🔥 {boss.name} 🔥</h2>\r\n            <div className=\"image-content\">\r\n              <img src={boss.imageURI} alt={`Boss ${boss.name}`} />\r\n              <div className=\"health-bar\">\r\n                <progress value={boss.hp} max={boss.maxHp} />\r\n                <p>{`${boss.hp} / ${boss.maxHp} HP`}</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"attack-container\">\r\n            <button className=\"cta-button\" onClick={runAttackAction}>\r\n              {`💥 Attack ${boss.name}`}\r\n            </button>\r\n          </div>\r\n          {attackState === \"attacking\" && (\r\n            <div className=\"loading-indicator\">\r\n              <LoadingIndicator />\r\n              <p>Attacking ⚔️</p>\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n\r\n      {/* Character NFT */}\r\n      {/* Replace your Character UI with this */}\r\n      {characterNFT && (\r\n        <div className=\"players-container\">\r\n          <div className=\"player-container\">\r\n            <h2>Your Character</h2>\r\n            <div className=\"player\">\r\n              <div className=\"image-content\">\r\n                <h2>{characterNFT.name}</h2>\r\n                <img\r\n                  src={characterNFT.imageURI}\r\n                  alt={`Character ${characterNFT.name}`}\r\n                />\r\n                <div className=\"health-bar\">\r\n                  <progress value={characterNFT.hp} max={characterNFT.maxHp} />\r\n                  <p>{`${characterNFT.hp} / ${characterNFT.maxHp} HP`}</p>\r\n                </div>\r\n              </div>\r\n              <div className=\"stats\">\r\n                <h4>{`⚔️ Attack Damage: ${characterNFT.attackDamage}`}</h4>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Arena;\r\n","import React from \"react\";\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport \"./App.css\";\nimport { useEffect, useState } from \"react\";\nimport SelectCharacter from \"./Components/SelectCharacter\";\nimport { CONTRACT_ADDRESS, transformCharacterData, abi } from \"./constants\";\nimport myEpicGame from \"./utils/MyEpicGame.json\";\nimport { ethers } from \"ethers\";\nimport Arena from \"./Components/Arena\";\nimport LoadingIndicator from \"./Components/LoadingIndicator\";\n\n// Constants\nconst TWITTER_HANDLE = \"_buildspace\";\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst App = () => {\n  /*\n   * Just a state variable we use to store our user's public wallet. Don't forget to import useState.\n   */\n  const [currentAccount, setCurrentAccount] = useState(null);\n  const [characterNFT, setCharacterNFT] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  /*\n   * Start by creating a new action that we will run on component load\n   */\n  // Actions\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        console.log(\"Make sure you have MetaMask!\");\n        return;\n      } else {\n        console.log(\"We have the ethereum object\", ethereum);\n\n        /*\n         * Check if we're authorized to access the user's wallet\n         */\n        const accounts = await ethereum.request({ method: \"eth_accounts\" });\n\n        /*\n         * User can have multiple authorized accounts, we grab the first one if its there!\n         */\n        if (accounts.length !== 0) {\n          const account = accounts[0];\n          console.log(\"Found an authorized account:\", account);\n          setCurrentAccount(account);\n        } else {\n          console.log(\"No authorized account found\");\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const renderContent = () => {\n    if (isLoading) {\n      return <LoadingIndicator />;\n    }\n\n    /*\n     * Scenario #1\n     */\n    if (!currentAccount) {\n      return (\n        <div className=\"connect-wallet-container\">\n          <img\n            src=\"https://64.media.tumblr.com/tumblr_mbia5vdmRd1r1mkubo1_500.gifv\"\n            alt=\"Monty Python Gif\"\n          />\n          <button\n            className=\"cta-button connect-wallet-button\"\n            onClick={connectWalletAction}\n          >\n            Connect Wallet To Get Started\n          </button>\n        </div>\n      );\n      /*\n       * Scenario #2\n       */\n    } else if (currentAccount && !characterNFT) {\n      return <SelectCharacter setCharacterNFT={setCharacterNFT} />;\n    } else if (currentAccount && characterNFT) {\n      return (\n        <Arena characterNFT={characterNFT} setCharacterNFT={setCharacterNFT} />\n      );\n    }\n  };\n\n  /*\n   * Implement your connectWallet method here\n   */\n  const connectWalletAction = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      /*\n       * Fancy method to request access to account.\n       */\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n\n      /*\n       * Boom! This should print out public address once we authorize Metamask.\n       */\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  /*\n   * This runs our function when the page loads.\n   */\n  useEffect(() => {\n    setIsLoading(true);\n    checkIfWalletIsConnected();\n  }, []);\n\n  useEffect(() => {\n    /*\n     * The function we will call that interacts with out smart contract\n     */\n    const fetchNFTMetadata = async () => {\n      console.log(\"Checking for Character NFT on address:\", currentAccount);\n\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(\n        CONTRACT_ADDRESS,\n        myEpicGame.abi,\n        signer\n      );\n\n      let addr = await signer.getAddress();\n      const txn = await gameContract.checkIfUserHasNFT(addr);\n      if (txn.name) {\n        console.log(\"User has character NFT\");\n        setCharacterNFT(transformCharacterData(txn));\n      } else {\n        console.log(\"No character NFT found\");\n      }\n      setIsLoading(false);\n    };\n\n    /*\n     * We only want to run this, if we have a connected wallet\n     */\n    if (currentAccount) {\n      console.log(\"CurrentAccount:\", currentAccount);\n      fetchNFTMetadata();\n    }\n  }, [currentAccount]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">⚔️ Metaverse Slayer ⚔️</p>\n          <p className=\"sub-text\">Team up to protect the Metaverse!</p>\n          {renderContent()}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built with @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}